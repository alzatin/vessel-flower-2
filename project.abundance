{
    "atomType": "Molecule",
    "name": "vessel-flower-2",
    "x": 0,
    "y": 0,
    "uniqueID": 1744404683465,
    "ioValues": [],
    "description": "Molecules provide an organizational structure to contain atoms. Double click on a molecule to enter it. Use the up arrow in the upper right hand corner of the screen to go up one level.",
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": 1744404692604,
            "ioValues": [],
            "description": "Connect geometry here to make it available in the next level up. "
        },
        {
            "atomType": "Circle",
            "name": "Circle",
            "x": 0.14995640802092416,
            "y": 0.33433734939759036,
            "uniqueID": 1744404767626,
            "ioValues": [
                {
                    "name": "diameter",
                    "ioValue": 10
                }
            ],
            "description": "Creates a new circle."
        },
        {
            "atomType": "Rectangle",
            "name": "Rectangle",
            "x": 0.17523975588491716,
            "y": 0.6174698795180722,
            "uniqueID": 1744404773043,
            "ioValues": [
                {
                    "name": "x length",
                    "ioValue": 10
                },
                {
                    "name": "y length",
                    "ioValue": 10
                }
            ],
            "description": "Creates a new rectangle."
        },
        {
            "atomType": "Fusion",
            "name": "Fusion",
            "x": 0.3783783783783784,
            "y": 0.5662650602409639,
            "uniqueID": 1744404778345,
            "ioValues": [
                {
                    "name": "Shape 1",
                    "ioValue": 1744404785173
                },
                {
                    "name": "Shape 2",
                    "ioValue": 1744404773043
                }
            ],
            "description": "Pick between assembly and fusion to join input geometries. Assembly takes multiple shapes together into one, shapes higher in the inputs list will cut into shapes lower on the input list where they overlap. Fusion takes all shapes or sketches and fuses them permanently into a single shape",
            "unionType": "Fusion"
        },
        {
            "atomType": "Move",
            "name": "Move",
            "x": 0.3016564952048823,
            "y": 0.4337349397590362,
            "uniqueID": 1744404785173,
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": 1744404767626
                },
                {
                    "name": "xDist",
                    "ioValue": 5
                },
                {
                    "name": "yDist",
                    "ioValue": 0
                },
                {
                    "name": "zDist",
                    "ioValue": 0
                }
            ],
            "description": "Moves a shape laterally in X, Y, Z."
        },
        {
            "atomType": "Rotate",
            "name": "Rotate",
            "x": 0.5152571926765475,
            "y": 0.6385542168674698,
            "uniqueID": 1744404791678,
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": 1744404778345
                },
                {
                    "name": "x-axis degrees",
                    "ioValue": 90
                },
                {
                    "name": "y-axis degrees",
                    "ioValue": 0
                },
                {
                    "name": "z-axis degrees",
                    "ioValue": 0
                }
            ],
            "description": "Rotates the input geometry around the X, Y, or Z axis. Inputs are degrees."
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.6625980819529206,
            "y": 0.5030120481927711,
            "uniqueID": 1744404836230,
            "ioValues": [
                {
                    "name": "inputShape",
                    "ioValue": 1744404791678
                },
                {
                    "name": "dist",
                    "ioValue": 10
                },
                {
                    "name": "height",
                    "ioValue": 10
                }
            ],
            "description": "Defines a Replicad code block.",
            "codeVersion": 1,
            "code": " \n      //Inputs:[inputShape, dist, height]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n      \n      //Takes the address and gets the shape from the library\n      let importedShape = library[inputShape]\n\n const newPlane = new Plane().pivot(0, 'Y');\n      \n      //This makes a new copy of of the shape (to prevent garbage collection issues),\n      //and moves it in the X direction. Note that this will not work if the input is an assembly\n      let movedShape = importedShape.geometry[0].sketchOnPlane(newPlane).extrude(height)\n      \n      //Console.log works for debugging to better see what is happening under the hood\n      console.log(\"Shape:\")\n      console.log(importedShape);\n\n\n      \n      //Shapes stored in the library have tags, a color, a plane, and a bill of materials like this. We don't modify them here\n      let shape1 = {\n        geometry: [movedShape],\n        tags: importedShape.tags,\n        color: importedShape.color,\n        plane: importedShape.plane,\n        bom: importedShape.bom\n      }\n      \n   return shape1"
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.5919790758500436,
            "y": 0.7891566265060241,
            "uniqueID": 1744404916698,
            "ioValues": [
                {
                    "name": "inputShape",
                    "ioValue": 10
                },
                {
                    "name": "dist",
                    "ioValue": 10
                },
                {
                    "name": "height",
                    "ioValue": 10
                }
            ],
            "description": "Defines a Replicad code block.",
            "codeVersion": 1,
            "code": " \n      //Inputs:[inputShape, dist, height]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n      \n      //Takes the address and gets the shape from the library\n      let importedShape = library[inputShape]\n      \n      //This makes a new copy of of the shape (to prevent garbage collection issues),\n      //and moves it in the X direction. Note that this will not work if the input is an assembly\n      let movedShape = importedShape.geometry[0].clone().translate([dist,0,0])\n      \n      //Console.log works for debugging to better see what is happening under the hood\n      console.log(\"Shape:\")\n      console.log(importedShape);\n      \n      //Shapes stored in the library have tags, a color, a plane, and a bill of materials like this. We don't modify them here\n      let shape1 = {\n        geometry: [movedShape],\n        tags: importedShape.tags,\n        color: importedShape.color,\n        plane: importedShape.plane,\n        bom: importedShape.bom\n      }\n      \n      //We could at this point return shape1 as a complete shape and it will be automatically written to the library for us\n      //return shape1\n      \n      //We can also create a new shape from scratch\n      let createdRectangle = replicad.drawRectangle(5,7)\n      //This is the plane we are going to put our new shape on\n      const newPlane = new Plane().pivot(0, 'Y');\n      //And we extrude the shape to make it 3D\n      let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n      \n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [createdShape], \n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n      \n      //Then we can return our created shape in just the same way\n      //return shape2\n      \n      //If we want to return both shapes at once, we can create an assembly with them\n      let anAssembly = {\n        geometry: [shape1, shape2], \n        tags: [\"aNewTag\"],\n        color: '#A3CF5B',\n        plane: newPlane,\n        bom: []\n      }\n      \n      //And we can return that in the same way\n      return anAssembly\n      \n      \n          /**\n          To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n          If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n          Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n          https://replicad.xyz/docs/introapp/UserGuide.html \n          Return a replicad object that includes geometry, color, tags and plane. \n      \n      \n          Example Code Atom:\n      \n            Inputs:[shape, x];\n      \n            let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n      \n            return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      \n            - See more examples at _______ \n      \n      \n          */\n      "
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap2Primary": true,
            "ap1ID": 1744404767626,
            "ap2ID": 1744404785173
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "Shape 2",
            "ap2Primary": false,
            "ap1ID": 1744404773043,
            "ap2ID": 1744404778345
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap2Primary": true,
            "ap1ID": 1744404778345,
            "ap2ID": 1744404791678
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "Shape 1",
            "ap2Primary": false,
            "ap1ID": 1744404785173,
            "ap2ID": 1744404778345
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "inputShape",
            "ap2Primary": false,
            "ap1ID": 1744404791678,
            "ap2ID": 1744404836230
        }
    ],
    "unitsKey": "Inches",
    "fileTypeVersion": 1,
    "compiledBom": {},
    "filetypeVersion": 1
}